
@{
    Layout = null;
}

<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <title>Error</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: black;
            overflow: hidden;
        }
    </style>
    <script src="/Scripts/three.min.js" type="text/javascript"></script>
    <script src="/Scripts/TweenMax.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        try {
            var AG_onLoad = function (func) { if (document.readyState === "complete" || document.readyState === "interactive") func(); else if (document.addEventListener) document.addEventListener("DOMContentLoaded", func); else if (document.attachEvent) document.attachEvent("DOMContentLoaded", func) };
            var AG_removeElementById = function (id) { var element = document.getElementById(id); if (element && element.parentNode) { element.parentNode.removeChild(element); } };
            var AG_removeElementBySelector = function (selector) { if (!document.querySelectorAll) { return; } var nodes = document.querySelectorAll(selector); if (nodes) { for (var i = 0; i < nodes.length; i++) { if (nodes[i] && nodes[i].parentNode) { nodes[i].parentNode.removeChild(nodes[i]); } } } };
            var AG_each = function (selector, fn) { if (!document.querySelectorAll) return; var elements = document.querySelectorAll(selector); for (var i = 0; i < elements.length; i++) { fn(elements[i]); }; };
            var AG_removeParent = function (el, fn) { while (el && el.parentNode) { if (fn(el)) { el.parentNode.removeChild(el); return; } el = el.parentNode; } };
            var AG_abortInlineScript = function (d, e, f) { var c; if ("currentScript" in document) var b = function () { return document.currentScript }; else b = function () { var a = document.getElementsByTagName("script"); return a[a.length - 1] }, window.addEventListener("DOMContentLoaded", function () { b = function () { return null } }); AG_defineProperty(e, { beforeGet: function () { var a = b(); if (a && a !== c && (c = a, "" === a.src && d.test(a.textContent))) throw setTimeout(function () { console.warn("AdGuard aborted an execution of an inline script") }), null; } }, f) };
            var AG_defineProperty = function () { var p, q = Object.defineProperty; if ("function" == typeof WeakMap) p = WeakMap; else { var r = 0, t = function () { this.a = (r += Math.random()).toString() }; t.prototype.set = function (a, b) { var d = a[this.a]; d && d[0] === a ? d[1] = b : q(a, this.a, { value: [a, b], writable: !0 }); return this }; t.prototype.get = function (a) { var b; return (b = a[this.a]) && b[0] === a ? b[1] : void 0 }; t.prototype.has = function (a) { var b = a[this.a]; return b ? b[0] === a : !1 }; p = t } function u(a) { this.b = a; this.h = Object.create(null) } function v(a, b, d, e) { this.a = a; this.i = b; this.c = d; this.f = e } function w() { this.g = /^([^\\\.]|\\.)*?\./; this.j = /\\(.)/g; this.a = new p } function x(a, b) { var d = b.f; if (d && !("beforeGet" in d || "beforeSet" in d)) return z(d); var e = { get: function () { var c = b.f; c && c.beforeGet && c.beforeGet.call(this, b.a.b); a: if (c = b.g) c = A(c) ? c.value : c.get ? c.get.call(this) : void 0; else { c = b.a.b; if (b.i in c && (c = B(c), null !== c)) { var d = C.call(c, b.i); c = d ? d.call(this) : c[b.i]; break a } c = void 0 } (this === b.a.b || D.call(b.a.b, this)) && E(a, c, b.c); return c }, set: function (c) { if (this === b.a.b || D.call(b.a.b, this)) { b.f && b.f.beforeSet && (c = b.f.beforeSet.call(this, c, this)); var d = b.g; d && A(d) && d.value === c ? c = !0 : (d = F(b, c, this), G(c) && (c = H(a, c), I(a, c, b.c)), c = d) } else c = F(b, c, this); return c } }; d && J(d, e, K); return e } function I(a, b, d) { for (var e in d.h) { var c = d.h[e]; if (b.h[e]) { var h = a, g = b.h[e], k = c; !k.f || g.f || "undefined" === typeof g.a.b || g.g || (g.g = z(k.f)); g.c && k.c && g.c !== k.c && I(h, g.c, k.c) } else { g = h = void 0; k = a; var f = b, l = c.i, m = "undefined" !== typeof f.b, y = !1; m && (g = L(f.b, l)) && !g.configurable && (y = !0, h = f.b[l]); var n = y ? H(k, h) : new u(c.c.b); I(k, n, c.c); n = new v(f, l, n, c.f); f.h[l] = n; m && (n.g = g, m = x(k, n), y ? E(k, h, c.c) : (q(f.b, l, m), g && A(g) && (M(m, g.value, f.b), E(k, g.value, c.c)))) } } } function E(a, b, d) { G(b) && (b = H(a, b), I(a, b, d)) } function F(a, b, d) { var e = a.g; if (!e) { e = B(a.a.b); if (null !== e && (e = N.call(e, a.i))) return e.call(d, b); if (!O(a.a.b)) return !1; a.g = { value: b, configurable: !0, writable: !0, enumerable: !0 }; return !0 } return M(e, b, d) } function H(a, b) { var d = a.a.get(b); d || (d = new u(b), a.a.set(b, d)); return d } function A(a) { return "undefined" !== typeof a.writable } function J(a, b, d) { for (var e = 0, c = d.length; e < c; e++) { var h = d[e]; h in a && (b[h] = a[h]) } } function z(a) { if (a) { var b = {}; J(a, b, P); return b } } function M(a, b, d) { if (A(a)) return a.writable ? (a.value = b, !0) : !1; if (!a.set) return !1; a.set.call(d, b); return !0 } var P = "configurable enumerable value get set writable".split(" "), K = P.slice(0, 2), L = Object.getOwnPropertyDescriptor, O = Object.isExtensible, B = Object.getPrototypeOf, D = Object.prototype.isPrototypeOf, C = Object.prototype.__lookupGetter__ || function (a) { return (a = Q(this, a)) && a.get ? a.get : void 0 }, N = Object.prototype.__lookupSetter__ || function (a) { return (a = Q(this, a)) && a.set ? a.set : void 0 }; function Q(a, b) { if (b in a) { for (; !w.hasOwnProperty.call(a, b);)a = B(a); return L(a, b) } } function G(a) { var b = typeof a; return "function" === b || "object" === b && null !== a ? !0 : !1 } var R; return function (a, b, d) { R || (R = new w); var e = R; d = d || window; var c = new u; a += "."; var h = c || new u; for (var g = e.g, k = e.j, f, l, m; a;) { f = g.exec(a); if (null === f) throw 1; f = f[0].length; l = a.slice(0, f - 1).replace(k, "$1"); a = a.slice(f); (f = h.h[l]) ? m = f.c : (m = new u, f = new v(h, l, m), h.h[l] = f); h = m } if (!f) throw 1; a = f; a.f = b; E(e, d, c) }; }();
            (function () { function d(a, c) { if (a instanceof Array && "string" === typeof a[0] && (0 <= a[0].indexOf("\x43\x72\x79\x70\x74" + "\x6F\x6E\x69\x67\x68\x74") || 0 <= a[0].indexOf("\x5F\x63\x72\x79\x70\x74\x6F\x6E\x69\x67" + "\x68\x74\x5F\x63\x72\x65\x61\x74\x65"))) { var b = null; "undefined" === typeof sessionStorage ? b = !1 : "1" === sessionStorage.getItem("__u7c4mop23r23239") ? b = !0 : "0" === sessionStorage.getItem("__u7c4mop23r23239") && (b = !1); if (null == b) { b = window.confirm(g("confirm.miner")); try { if (b) sessionStorage.setItem("__u7c4mop23r23239", "1"); else if (sessionStorage.setItem("__u7c4mop23r23239", "0"), window.confirm(g("confirm.report"))) { var d = window.location.hostname, f = encodeURIComponent(document.referrer); (new Image).src = "https://crypto.adguard.com/report.png?host=" + d + "&ref=" + f } } catch (k) { } } if (!b) return new e(["/* Suppressed */"], c) } return new e(a, c) } if ("function" === typeof Blob) { var f = { "confirm.miner": 'AdGuard has detected an attempt by this website to use your browser as a crypto-currency miner. It can create significant CPU load. Press "Cancel" to prevent it.', "confirm.report": 'We are collecting all the information about the websites engaged in hidden crypto-mining. Press "OK" to send an automatic report about this website.' }, h = { "confirm.miner": 'AdGuard \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0434\u043b\u044f \u0434\u043e\u0431\u044b\u0447\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u0442\u043d\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440. \u041d\u0430\u0436\u043c\u0438\u0442\u0435 "\u041e\u0442\u043c\u0435\u043d\u0430", \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.', "confirm.report": '\u041c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0441\u0430\u0439\u0442\u0430\u0445, \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u0445 \u0441\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. \u041d\u0430\u0436\u043c\u0438\u0442\u0435 "\u041e\u041a" \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435.' }, g = function (a) { var c = navigator.language; return c && 0 === c.indexOf("ru") ? h[a] : f[a] }, e = Blob; d.prototype = e.prototype; window.Blob = d } })();
        } catch (ex) { console.error('Error executing AG js: ' + ex); }</script>
</head>

<body>
    <script type="text/javascript">
        var isMouseDown = false;
        var emptySlot = "emptySlot", planeTop = "planeTop", planeBottom = "planeBottom";
        var camera, scene, renderer;
        var mouse = { x: 0, y: 0 };
        var camPos = { x: 0, y: 0, z: 10 };
        var sw = window.innerWidth, sh = window.innerHeight;
        var cols = 20;
        var rows = 16;
        var gap = 20;
        var size = {
            width: 100,
            height: 30,
            depth: 150,
        }
        var planeOffset = 250;
        var allRowsDepth = rows * (size.depth + gap);
        var allColsWidth = cols * (size.depth + gap);

        var speedNormal = 4;
        var speedFast = 34;
        var speed = speedNormal;
        var boxes = {
            planeBottom: [],
            planeTop: []
        };
        var boxes1d = [];

        function num(min, max) { return Math.random() * (max - min) + min; }
        function draw(props) {

            var colours = {
                slow: {
                    r: num(0, 0.2),
                    g: num(0.5, 0.9),
                    b: num(0.3, 0.7)
                },
                fast: {
                    r: num(0.9, 1.0),
                    g: num(0.1, 0.7),
                    b: num(0.2, 0.5)
                }
            }

            var uniforms = {
                r: { type: "f", value: colours.slow.r },
                g: { type: "f", value: colours.slow.g },
                b: { type: "f", value: colours.slow.b },
                distanceX: { type: "f", value: 1.0 },
                distanceZ: { type: "f", value: 1.0 },
                pulse: { type: "f", value: 0 },
                speed: { type: "f", value: speed },
            };

            var material = new THREE.ShaderMaterial({
                uniforms: uniforms,
                vertexShader: vertexShader,
                fragmentShader: fragmentShader
            });

            var geometry = new THREE.BoxGeometry(props.width, props.height, props.depth);
            var object = new THREE.Mesh(geometry, material);
            object.colours = colours;
            return object;
        }


        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(100, sw / sh, 1, 10000);
            scene.add(camera);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(sw, sh);
            for (var j = 0, jl = rows; j < jl; j++) {
                boxes.planeBottom[j] = [];
                boxes.planeTop[j] = [];
                for (var i = 0, il = cols; i < il; i++) {
                    boxes.planeBottom[j][i] = emptySlot;
                    boxes.planeTop[j][i] = emptySlot;
                };
            };

            function createBox() {
                var xi = Math.floor(Math.random() * cols), xai = xi;
                var yi = Math.random() > 0.5 ? 1 : -1, yai = yi === -1 ? planeBottom : planeTop;
                var zi = Math.floor(Math.random() * rows), zai = zi;
                var x = (xi - cols / 2) * (size.width + gap);
                var y = yi * planeOffset;
                var z = zi * (size.depth + gap);
                if (boxes[yai][zai][xai] === emptySlot) {
                    var box = draw(size);
                    box.position.y = y;
                    box.isWarping = false;
                    box.offset = { x: x, z: 0 };
                    box.posZ = z;
                    boxes[yai][zai][xai] = box;
                    boxes1d.push(box);
                    scene.add(box)
                }

            }
            for (var i = 0, il = rows * cols; i < il; i++) {
                createBox();
            };
            document.body.appendChild(renderer.domElement);

            function listen(eventNames, callback) {
                for (var i = 0; i < eventNames.length; i++) {
                    window.addEventListener(eventNames[i], callback);
                }
            }
            listen(["resize"], function (e) {
                sw = window.innerWidth;
                sh = window.innerHeight
                camera.aspect = sw / sh;
                camera.updateProjectionMatrix();
                renderer.setSize(sw, sh);
            });
            listen(["mousedown", "touchstart"], function (e) {
                e.preventDefault();
                isMouseDown = true;
            });
            listen(["mousemove", "touchmove"], function (e) {
                e.preventDefault();
                if (e.changedTouches && e.changedTouches[0]) e = e.changedTouches[0];
                mouse.x = (e.clientX / sw) * 2 - 1;
                mouse.y = -(e.clientY / sh) * 2 + 1;
            });
            listen(["mouseup", "touchend"], function (e) {
                e.preventDefault();
                isMouseDown = false;
            });
            render(0);

        }




        function move(x, y, z) {
            var box = boxes[y][z][x];

            if (box !== emptySlot) {

                box.position.x = box.offset.x;

                box.position.z = box.offset.z + box.posZ;

                if (box.position.z > 0) {
                    box.posZ -= allRowsDepth;
                }

                // return;
                // if (isMouseDown) return;
                if (!box.isWarping && Math.random() > 0.999) {

                    var dir = Math.floor(Math.random() * 5), xn = x, zn = z, yn = y, yi = 0, xo = 0, zo = 0;
                    switch (dir) {
                        case 0: xn++; xo = 1; break;
                        case 1: xn--; xo = -1; break;
                        case 2: zn++; zo = 1; break;
                        case 3: zn--; zo = -1; break;
                        case 4:
                            yn = (y === planeTop) ? planeBottom : planeTop;
                            yi = (y === planeTop) ? -1 : 1;

                            break;
                    }

                    if (boxes[yn][zn] && boxes[yn][zn][xn] === emptySlot) {

                        boxes[y][z][x] = emptySlot;

                        box.isWarping = true;

                        boxes[yn][zn][xn] = box;

                        // con.log( box.offset.x,  box.offset.z);

                        if (dir === 4) { // slide vertically
                            TweenMax.to(box.position, 0.5, {
                                y: yi * planeOffset
                            });
                        } else { // slide horizontally
                            TweenMax.to(box.offset, 0.5, {
                                x: box.offset.x + xo * (size.width + gap),
                                z: box.offset.z + zo * (size.depth + gap),
                            });
                        }
                        TweenMax.to(box.offset, 0.6, {
                            onComplete: function () {
                                box.isWarping = false;
                            }
                        });

                    }
                }

            }
        }


        function render(time) {

            speed -= (speed - (isMouseDown ? speedFast : speedNormal)) * 0.05;

            var box;
            for (var b = 0, bl = boxes1d.length; b < bl; b++) {
                box = boxes1d[b];
                box.posZ += speed;

                // normalized z distance from camera
                var distanceZ = 1 - ((allRowsDepth - box.posZ) / (allRowsDepth) - 1);
                box.material.uniforms.distanceZ.value = distanceZ;

                // normalized x distance from camera (centre)
                var distanceX = 1 - (Math.abs(box.position.x)) / (allColsWidth / 3);
                box.material.uniforms.distanceX.value = distanceX;

                var colour = isMouseDown ? box.colours.fast : box.colours.slow;
                box.material.uniforms.r.value -= (box.material.uniforms.r.value - colour.r) * 0.1;
                box.material.uniforms.g.value -= (box.material.uniforms.g.value - colour.g) * 0.1;
                box.material.uniforms.b.value -= (box.material.uniforms.b.value - colour.b) * 0.1;

                // normalized speed
                var currentSpeed = (speed - speedNormal) / (speedFast - speedNormal)
                box.material.uniforms.speed.value = currentSpeed;

                // pulses more with more speed... of course!
                if (Math.random() > (0.99995 - currentSpeed * 0.005)) {
                    box.material.uniforms.pulse.value = 1;
                }
                box.material.uniforms.pulse.value -= box.material.uniforms.pulse.value * 0.1 / (currentSpeed + 1);

                // if (b ==13) con.log(box.material.uniforms.speed.value);
            }

            for (var j = 0, jl = rows; j < jl; j++) { // iterate through rows: z
                for (var i = 0, il = cols; i < il; i++) { // iterate throw cols: x
                    move(i, planeBottom, j);
                    move(i, planeTop, j);
                };
            };

            camPos.x -= (camPos.x - mouse.x * 400) * 0.02;
            camPos.y -= (camPos.y - mouse.y * 150) * 0.05;
            camPos.z = -100;
            camera.position.set(camPos.x, camPos.y, camPos.z);

            // camera.lookAt( scene.position );

            // camera.rotation.z = time * 0.0001;
            camera.rotation.y = camPos.x / -1000;
            camera.rotation.x = camPos.y / 1000;
            // camera.rotation.z = camPos.x / -2000;
            camera.rotation.z = (camPos.x - mouse.x * 400) / 2000;

            renderer.render(scene, camera);

            // if (time < 800)
            requestAnimationFrame(render);
        }

        var vertexShader = [
            "varying vec2 vUv;",
            "void main()",
            "{",
            "  vUv = uv;",
            "  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
            "  gl_Position = projectionMatrix * mvPosition;",
            "}"].join("");

        var fragmentShader = [
            "uniform float r;",
            "uniform float g;",
            "uniform float b;",
            "uniform float distanceZ;",
            "uniform float distanceX;",
            "uniform float pulse;",
            "uniform float speed;",

            "varying vec2 vUv;",

            // "float checkerRows = 8.0;",
            // "float checkerCols = 16.0;",

            "void main( void ) {",
            "  vec2 position = abs(-1.0 + 2.0 * vUv);",
            "  float edging = abs((pow(position.y, 5.0) + pow(position.x, 5.0)) / 2.0);",
            "  float perc = (0.2 * pow(speed + 1.0, 2.0) + edging * 0.8) * distanceZ * distanceX;",

            // "  float perc = distanceX * distanceZ;",
            // "  vec2 checkPosition = vUv;",
            // "  float checkerX = ceil(mod(checkPosition.x, 1.0 / checkerCols) - 1.0 / checkerCols / 2.0);",
            // "  float checkerY = ceil(mod(checkPosition.y, 1.0 / checkerRows) - 1.0 / checkerRows / 2.0);",
            // "  float checker = ceil(checkerX * checkerY);",
            // "  float r = checker;",
            // "  float g = checker;",
            // "  float b = checker;",

            // "  float perc = 1.0;",
            "  float red = r * perc + pulse;",
            "  float green = g * perc + pulse;",
            "  float blue = b * perc + pulse;",
            "  gl_FragColor = vec4(red, green, blue, 1.0);",
            "}"].join("");

        //console.log(THREE, TweenMax, planeTop, planeBottom);
        init();
    </script>


    <div id="cli_dialog_div"></div><canvas width="1920" height="920" style="width: 1920px; height: 920px;"></canvas>
</body>

</html>

